{
    "logger": {
        // Should the program print debug messages?
        "debug": true,
        // Logger template.
        "template": "{time} {message}",
        "fileLogger": {
            // Should save logs to the file system?
            "shouldLog": true,
            // Directory/folder to save the logs in.
            "directory": "./logs/"
        }
    },
    "engines": [
        {
            // Starts in the engine/ folder (requirement).
            "path": "stockfish-windows-x86-64-modern.exe",
            "autoEngineDownload": {
                "enabled": true,
                "engines": {
                    "stockfish-dev": true
                }
            },
            "uciOptions": {
                "Threads": 20,
                "Hash": 16384,
                "UCI_ShowWDL": true,
                "Slow Mover": 70,
                "Move Overhead": 1000,
                "SyzygyPath": "D:/;G:/Syzygy/",
                "Ponder": true
            },
            "commandLineArguments": [ ]
        }
    ],
    // only supports a very custom format at the moment
    "openingBook": {
        "enabled": true,
        "path": "./books/sf16dev-depth12-wide1.25M.db",
        // The maximum allowed stored moves per FEN, with a large opening book, more
        // moves stored will use a lot more memory. If you plan on playing the best moves (from book), you
        // are better off setting this to 1 (as more than that is pointless).
        "movesPerFen": 1
    },
    // The settings for determining whether a challenge request should be accepted or not.
    "challengeRequests": {
        "timeControl": {
            // Accepted time control speeds.
            "acceptedModes": [
                "ultrabullet",
                "bullet",
                "blitz",
                "rapid",
                "classical"
                // "correspondence"
            ],
            // Minimum total time of the game (in seconds).
            "minimumTime": 0,
            // Minimum time per move made (in seconds).
            "minimumIncrement": 1,
            // Time to spend thinking about a move in correspondence chess (in seconds).
            // (with the exception of engines like Stockfish that will play moves at max depth (245) reguardless of time).
            "correspondenceTime": 60
        },
        // Currently accepted variants are only Chess (because the implementation of different variants has not been made for engines).
        // Adding any other variants will probably cause an error and won't work.
        "variants": [
            "standard"
        ],
        "acceptsRated": true,
        "acceptsCasual": true,
        // maximum games running at the same time
        "maxActiveGames": 1
    },
    "gameSettings": {
        "draws": {
            "enabled": true,
            "maxCpAdvantage": 20,
            "maxRatingDifference": -50
        }
    },
    "consoleAnnouncements": {
        "announcePonder": true, // announce what our ponder is?
        "announcePonderHit": true, // announce when we got ponderhit? (expected move was played)
        "announcePlayedMove": true, // announce when the engine has decided its move?
        "announceConsideringMove": true // announce when the engine is considering a move? (that wasn't a ponderhit)
    },
    "chatMessages": {
        // The message sent when the bot joins a game.
        "greetingsMessage": {
            "enabled": true,
            "message": "To view available commands, type !help."
        },
        // The message sent when the engine has loaded successfully.
        "engineLoadedMessage": {
            "enabled": true,
            "message": "{engine_name} is ready. Good luck, @{opponent}!"
        },
        // The message sent in response to !help (list of commands).
        "helpMessage": {
            "enabled": true,
            "message": "List of commands: !help, !printeval"
        },
        // The message sent in response to !printeval.
        "printEvalEnabled": {
            "enabled": true,
            "message": "Toggling printing evaluation after each move."
        },
        "evalMessage": {
            "enabled": true,
            "message": "=> eval: {eval}, depth: {depth}, nodes: {nodes}, nps: {nps}, hashfull: {hashfull}"
        },
        "discoveredMateMessage": {
            "enabled": true,
            "message": "Discovered a forced checkmate in at least {moves} moves."
        }
    },
    "websocketHtmlStreamer": {
        "enabled": true,
        "port": 2793
    }
}